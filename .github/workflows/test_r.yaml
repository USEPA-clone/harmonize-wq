name: R-test

on:
  push:
    branches:
      [main, dev]
  pull_request:
    branches:
      [main]
  schedule:
    - cron: '11 1 1 * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  R-test:
    name: python ${{ matrix.python-version }}, ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        include:
          - os: windows-latest
            python-version: "3.9"
    steps:
      - uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.config.python }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
      
      #- uses: r-lib/actions/setup-renv@v2
      
      - uses: r-lib/actions/setup-pandoc@v2
      
      - name: R depends
        shell: Rscript {0}
        run: |
          install.packages(c("knitr", "rmarkdown", "reticulate"))
        
      - name: setup r-reticulate venv & render rmd
        shell: Rscript {0}
        run: |
          library(reticulate)

          packages = c(
              "pytest", "numpy<2.0", "pandas<2.0", "geopandas>=0.10.2, <0.13", "pint>=0.18",
              "dataretrieval>=1.0, <1.0.5", "requests"
              )
          
          reticulate::install_miniconda()
          reticulate::conda_create("wq_harmonize")
          reticulate::conda_install("wq_harmonize", packages)

          #path_to_venv <- virtualenv_create(
          #  envname = "wq_harmonize",
          #  python = Sys.which("python"), # placed on PATH by the setup-python action
          #  packages
          #)
          #use_virtualenv("wq_harmonize")

          rmarkdown::render(input = "demos/harmonize_Pensacola.Rmd")
        
      - name: Run pytest
        run: pytest -v harmonize_wq
